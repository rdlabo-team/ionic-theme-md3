@use '../utils/api';

/**
 * Note: ion-back-button should not put inner ion-button.
 * feat(): ion-config new property for disable ion-back-button Animation
 */

$scaleup-small: 1.12;
$scaleup-small-icon-only: 1.18;
$scaleup-default: 1.25;
$scaleup-default-icon-only: 1.32;
$scaleup-large: 1.12;
$scaleup-large-icon-only: 1.22;

@mixin theme-buttons {
  @include api.glass-background;
  border-radius: 25px;
  overflow: hidden;

  /**
   * compare .header-collapse-main ion-toolbar.in-toolbar ion-title, .header-collapse-main ion-toolbar.in-toolbar ion-buttons
   */
  transition: transform var(--ios26-activated-transition-duration) ease-out !important;

  z-index: 0;

  &:has(.ion-activated) {
    z-index: 5;
    @include api.glass-background-button-activated;

    transform: scale($scaleup-default-icon-only);
    &:has(:not(.button-has-icon-only):not(.back-button-has-icon-only)),
    &:has(ion-button:nth-child(n + 2)) {
      transform: scale($scaleup-default);
    }
    &:has(.button-small) {
      transform: scale($scaleup-small-icon-only);
      &:has(:not(.button-has-icon-only):not(.back-button-has-icon-only)),
      &:has(ion-button:nth-child(n + 2)) {
        transform: scale($scaleup-small);
      }
    }
    &:has(.button-large) {
      transform: scale($scaleup-large-icon-only);
      &:has(:not(.button-has-icon-only):not(.back-button-has-icon-only)),
      &:has(ion-button:nth-child(n + 2)) {
        transform: scale($scaleup-large);
      }
    }
  }

  &:has(ion-button:not(.ios26-disabled).button-clear.button-large) {
    border-radius: 30px;
  }

  ion-button:not(.ios26-disabled).button-clear {
    transform: none;

    font-weight: 500;
    &.button-small {
      min-height: calc(24px - 2px);
      --padding-top: 1px;
      --padding-bottom: 1px;
      --padding-start: 0.5em;
      --padding-end: 0.5em;
    }
    &.button-default {
      &::part(native) {
        min-height: calc(44px - 2px); // reduce for border 2px;
      }
      --padding-top: 16px;
      --padding-bottom: 16px;
      --padding-start: 1em;
      --padding-end: 1em;
    }
    &.button-large {
      min-height: calc(62px - 2px);
      --padding-top: 17px;
      --padding-start: 1em;
      --padding-end: 1em;
      --padding-bottom: 17px;
    }
    color: rgb(var(--ion-text-color-rgb, 0, 0, 0));
    &.ion-color {
      color: rgb(var(--ion-color-base-rgb, var(--ion-text-color-rgb, 0, 0, 0)));
    }
    &.ion-activated {
      color: rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.1);
      &.ion-color {
        color: rgba(var(--ion-color-base-rgb, var(--ion-text-color-rgb, 0, 0, 0)), 0.1);
      }
    }

    &:not(.button-disabled) {
      opacity: 1;
    }

    &.ion-activated {
      --color: rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.1);
      &.ion-color {
        --color: rgba(var(--ion-color-base-rgb, var(--ion-text-color-rgb, 0, 0, 0)), 0.1);
      }
    }

    &::part(native) {
      /**
       * overwrite theme-button mixin.
       * ex) ion-button.ios:not(.ios26-disabled):not(.button-solid):not(.ios26-button-solid):not(.button-outline):not(.ios26-button-outline):not(.button-clear):not(.ios26-button-clear)::part(native)
       */
      box-shadow: none !important;
      border: none !important;
      background: transparent !important;
      backdrop-filter: none !important;
    }
  }

  ion-button:not(.ios26-disabled) {
    margin: 0;
    :first-child {
      margin-left: -8px;
    }
    :last-child {
      margin-right: -8px;
    }
    :only-child {
      margin: 0;
    }
  }
  ion-menu-button:not(.ios26-disabled) {
    width: 44px;
    height: 44px;
    padding: 2px;
  }
}

@mixin theme-button() {
  max-height: inherit;
  z-index: 0;
  &.ion-activated {
    z-index: 10;
  }

  transition:
    transform var(--ios26-activated-transition-duration) ease-out,
    color 50ms ease;
  will-change: transform;

  // button size default
  &:not(.button-small):not(.button-large) {
    font-size: 1.05rem;
    &:not(.button-has-icon-only):not(.back-button-has-icon-only) {
      &::part(native) {
        padding: 0 12px;
        min-height: 44px;
      }
      ion-icon[slot='start'] {
        margin-inline-start: -0.15em;
        margin-inline-end: 0.15em;
      }
      ion-icon[slot='end'] {
        margin-inline-start: 0.15em;
        margin-inline-end: -0.15em;
      }
    }
  }

  &:not(.button-round) {
    --border-radius: 24px;
    &.button-large {
      --border-radius: 30px;
    }
  }

  /*
   * fill=solid && type=submit button has edge brightness.
   */
  &.button-solid[type='submit'] {
    @each $item in primary, secondary, tertiary, success, warning, danger, light, medium, dark {
      &.ion-color-#{$item} {
        --color: var(--ion-color-#{$item}-brightness, var(--ion-color-contrast));
        --color-activated: var(--ion-color-#{$item}-brightness);
        --border-color: var(--ion-color-#{$item}-brightness, transparent);
        --border-width: 0.5px;
        --border-style: solid;
      }
    }
    --background-color: #fff;
    --background-activated-opacity: 1;
    &:not(.button-has-icon-only):not(.back-button-has-icon-only) {
      &:not(.button-small):not(.button-large) {
        min-height: 44px;
      }
    }
    &::part(native) {
      position: relative;
      color: var(--color);
      z-index: 0;
    }
    &.ion-activated {
      --border-width: 0.78px;
      &::part(native) {
        @include api.glass-background-button-activated;
        color: var(--color-activated);
        &::before {
          content: '';
          z-index: 1;
          width: 100%;
          height: 100%;
          position: absolute;
          top: 0;
          left: 0;
          border-radius: inherit;
          pointer-events: none;
          backdrop-filter: brightness(144%);
        }
      }
      &.ion-activated.button-has-icon-only,
      &.ion-activated.back-button-has-icon-only {
        transform: scale($scaleup-default-icon-only);
        &.button-small {
          transform: scale($scaleup-small-icon-only);
        }
        &.button-large {
          transform: scale($scaleup-large-icon-only);
        }
      }

      &:not(.button-has-icon-only):not(.back-button-has-icon-only) {
        transform: scale($scaleup-default);
        &.button-small {
          transform: scale($scaleup-small);
        }
        &.button-large {
          transform: scale($scaleup-large);
        }
      }
    }
    &.button-disabled {
      opacity: 1;
      &::part(native) {
        background: var(--ion-background-color-step-200, #cccccc);
        color: #fff;
        border: none;
      }
    }
  }

  // fill:default only
  &:not(.button-solid):not(.button-outline):not(.button-clear) {
    --background-hover: transparent;
    --background-activated: transparent;

    &:not(.button-has-icon-only):not(.back-button-has-icon-only) {
      &:not(.button-small):not(.button-large) {
        min-height: 44px;
      }
    }

    &::part(native) {
      @include api.glass-background;
      color: var(--color);
    }

    &:not(.button-disabled) {
      opacity: 1; // for ion-back-button
    }
    --color: rgb(var(--ion-text-color-rgb, 0, 0, 0));
    &.ion-color {
      --color: rgba(var(--ion-color-base-rgb, var(--ion-text-color-rgb, 0, 0, 0)), 1);
    }
    &.ion-activated {
      --color: rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.1);
      &.ion-color {
        --color: rgba(var(--ion-color-base-rgb, var(--ion-text-color-rgb, 0, 0, 0)), 0.1);
      }
      &.ion-activated.button-has-icon-only,
      &.ion-activated.back-button-has-icon-only {
        transform: scale($scaleup-default-icon-only);
        &.button-small {
          transform: scale($scaleup-small-icon-only);
        }
        &.button-large {
          transform: scale($scaleup-large-icon-only);
        }
      }

      &:not(.button-has-icon-only):not(.back-button-has-icon-only) {
        transform: scale($scaleup-default);
        &.button-small {
          transform: scale($scaleup-small);
        }
        &.button-large {
          transform: scale($scaleup-large);
        }
      }
      &::part(native) {
        opacity: 1; // for ion-back-button
      }
    }
    &.button-disabled {
      opacity: 1;
      --color: rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.5);
      &.ion-color {
        --color: rgba(var(--ion-color-base-rgb, var(--ion-text-color-rgb, 0, 0, 0)), 0.5);
      }
    }
  }

  &.button-has-icon-only,
  &.back-button-has-icon-only {
    &:not(.button-small):not(.button-large)::part(native) {
      width: 44px;
      height: 44px;
      padding: 2px;
    }

    ion-icon {
      font-size: 1.4rem;
      &[name='close-outline'] {
        font-size: 2rem;
      }
    }
  }
}

ion-buttons.ios:not(.ios26-disabled):not(:has(ion-back-button, ion-button:not(.button-clear))) {
  @include theme-buttons;
}
ion-button.ios:not(.ios26-disabled) {
  @include theme-button;
}
ion-back-button.ios:not(.ios26-disabled) {
  @include theme-button;
}

ion-back-button.ion-cloned-element {
  visibility: hidden;
}
