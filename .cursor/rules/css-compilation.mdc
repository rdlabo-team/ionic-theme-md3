---
description: SCSS to CSS compilation process and build workflow
globs: *.scss,*.css,package.json
---

# CSS Compilation Process

## ビルドプロセス

### ソースファイル
- **入力**: `src/styles/` ディレクトリ内のSCSSファイル
- **メインファイル**: [src/styles/ionic-theme-ios26.scss](mdc:src/styles/ionic-theme-ios26.scss)

### 出力ファイル
- **CSS出力**: `dist/css/` ディレクトリ内のCSSファイル
  - [dist/css/ionic-theme-ios26.css](mdc:dist/css/ionic-theme-ios26.css): メインCSSファイル
  - [dist/css/ionic-theme-ios26-dark-*.css](mdc:dist/css/): ダークテーマ用CSSファイル
  - [dist/css/md-ion-list-inset.css](mdc:dist/css/md-ion-list-inset.css): インセットリスト専用CSS
  - [dist/css/components/](mdc:dist/css/components/): 個別コンポーネントCSSファイル
  - [dist/css/utils/](mdc:dist/css/utils/): ユーティリティCSSファイル

- **TypeScript出力**: `dist/` ディレクトリ内のJSファイル
  - [dist/index.js](mdc:dist/index.js): メインJSファイル
  - [dist/gestures/](mdc:dist/gestures/): ジェスチャー関連JSファイル
  - [dist/*.d.ts](mdc:dist/): TypeScript型定義ファイル

## コンパイル時の注意事項

1. **依存関係**: [package.json](mdc:package.json)でビルドツールの依存関係を確認
2. **ソースマップ**: 開発時のデバッグ用にソースマップファイルも生成
3. **最適化**: 本番用にはCSSの最適化（minify）を検討
4. **テスト**: コンパイル後は`demo/`アプリケーションで動作確認

## ファイル構造の一貫性

- SCSSファイルは`src/styles/`に配置
- TypeScriptファイルは`src/gestures/`に配置
- コンパイル後のCSSファイルは`dist/css/`に配置
- コンパイル後のJSファイルは`dist/`に配置
- デモアプリケーションは`demo/`に配置
- スクリーンショットなどのリソースは`screenshots/`に配置